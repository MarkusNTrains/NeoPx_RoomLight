/*##############################################################################

  THIS IS GENERATED CODE (use C:\_my\Arduino\NeoPx_RoomLight\Script\htmlToC_saveRAM.py.ods)
    ==> DO NOT EDIT MANUALLY !!!

##############################################################################*/


/*******************************************************************************
Project   RoomLight

  This is an OpenSource Project.
  You can use, share or improve this project. If you improve this source code
  please share with the comunity or at least with the author of the original
  source code

  Created 27. April 2023 by MarkusNTrains
================================================================================
$HeadURL:  $
$Id:  $
*******************************************************************************/


//-----------------------------------------------------------------------------
// includes
#include "Website.h"


//-----------------------------------------------------------------------------
// This variant needs more flash but less heap
// PROGMEM -> store data in flash
//   to read out the sored data from PROGMEM use one macro of <avr/pgmspace.h>
//   - e.g. (char*)pgm_read_word(&(PARAM_IN_PROGMEM))
//   - or use memcpy_P
//      data_type_t param_SRAM
//      memcpy_P(&param_SRAM, &PARAM_IN_PROGMEM, sizeof(data_type_t))
//   more infos: https://www.arduino.cc/reference/en/language/variables/utilities/progmem/

// F Macro within println (exp.  println(F('Hello World'))) -> store string in flash


//*****************************************************************************
// description:
//   Website_SendToClient
//*****************************************************************************
void Website_SendToClient(EthernetClient* client)
{
    client->println(F("<!-- html realtime: https://htmledit.squarefree.com/-->"));
    client->println(F("<!DOCTYPE HTML>"));
    client->println(F("<html lang=\"en\">"));
    client->println(F("<head>"));
    client->println(F("<meta charset=\"utf-8\">"));
    client->println(F("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">"));
    client->println(F("<title>MoBa Room Light</title>"));
    client->println(F("<link rel=\"icon\" href=\"favicon.ico\">"));
    client->println(F(""));
    client->println(F("<style type=\"text/css\">"));
    client->println(F(":root {"));
    client->println(F("--backgroundColor: #222222;"));
    client->println(F("--headerBackgroundColor: #444444;"));
    client->println(F("--BackgroundColorActive: #ffbf00;"));
    client->println(F("--BackgroundColorHover: #009fff;"));
    client->println(F("--sliderBackgroundColor: #4b4b4b;"));
    client->println(F("--SliderThumbColor: var(--sliderBackgroundColor);"));
    client->println(F("--textColorDark: #000000;"));
    client->println(F("--textColorLight: #ffffff;"));
    client->println(F("--boarderColor: #000000;"));
    client->println(F(""));
    client->println(F("background-color: var(--backgroundColor);"));
    client->println(F("color: var(--textColorLight);"));
    client->println(F("}"));
    client->println(F(".out_box {"));
    client->println(F("float: left;"));
    client->println(F("margin: 0 20px 20px 0;"));
    client->println(F("border: 1px solid blue;"));
    client->println(F("padding: 0 5px 0 5px;"));
    client->println(F("min-width: 280px;"));
    client->println(F("}"));
    client->println(F("input {"));
    client->println(F("margin: 10px;"));
    client->println(F("}"));
    client->println(F("input {"));
    client->println(F("vertical-align: -3px;"));
    client->println(F("}"));
    client->println(F("h1 {"));
    client->println(F("font-size: 150%;"));
    client->println(F("color: var(--textColorLight);"));
    client->println(F("background-color: var(--headerBackgroundColor);"));
    client->println(F("margin: 0 0 10px 0;"));
    client->println(F("width: calc(100% - 32px);"));
    client->println(F("border-radius: 4px;"));
    client->println(F("padding: 8px 16px 8px 16px;"));
    client->println(F("border: 2px solid var(--boarderColor);"));
    client->println(F("}"));
    client->println(F("h2 {"));
    client->println(F("font-size: 120%;"));
    client->println(F("color: var(--textColorLight);"));
    client->println(F("background-color: var(--headerBackgroundColor);"));
    client->println(F("margin: 5px 0 5px 0;"));
    client->println(F("width: calc(100% - 32px);"));
    client->println(F("border-radius: 4px;"));
    client->println(F("padding: 8px 16px 8px 16px;"));
    client->println(F("border: 2px solid var(--boarderColor);"));
    client->println(F("}"));
    client->println(F("p, form, button {"));
    client->println(F("font-size: 80%;"));
    client->println(F("color: var(--textColorDark);"));
    client->println(F("background-color: var(--backgroundColor);"));
    client->println(F("}"));
    client->println(F("a {"));
    client->println(F("color: var(--BackgroundColorActive);"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("/*----------------------------------------------------------------------*/"));
    client->println(F("/* button */"));
    client->println(F(".button {"));
    client->println(F("color: var(--textColorLight);"));
    client->println(F("background-color: var(--backgroundColor);"));
    client->println(F("border: 2px solid var(--headerBackgroundColor);"));
    client->println(F("border-radius: 4px;"));
    client->println(F("padding: 16px 12px;"));
    client->println(F("text-align: center;"));
    client->println(F("text-decoration: none;"));
    client->println(F("display: inline-block;"));
    client->println(F("font-size: 16px;"));
    client->println(F("margin: 4px 2px;"));
    client->println(F("-webkit-transition-duration: 0.4s; /* Safari */"));
    client->println(F("transition-duration: 0.4s;"));
    client->println(F("cursor: pointer;"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F(".button:hover {"));
    client->println(F("background-color: var(--BackgroundColorHover);"));
    client->println(F("color: var(--textColorDark);"));
    client->println(F("}"));
    client->println(F(".button:active {"));
    client->println(F("background-color: var(--BackgroundColorActive);"));
    client->println(F("color: var(--textColorDark);"));
    client->println(F("transform: translateY(2px);"));
    client->println(F("}"));
    client->println(F(".active-class {"));
    client->println(F("background-color: var(--BackgroundColorActive);"));
    client->println(F("color: var(--textColorDark);"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("/*----------------------------------------------------------------------*/"));
    client->println(F("/* user values */"));
    client->println(F(".user_value {"));
    client->println(F("border: 0;"));
    client->println(F("color: #f6931f;"));
    client->println(F("font-weight: bold;"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("/*----------------------------------------------------------------------*/"));
    client->println(F("/* slider */"));
    client->println(F(".slidecontainer {"));
    client->println(F("width: 100%;"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F(".slider {"));
    client->println(F("-webkit-appearance: none;"));
    client->println(F("-moz-appearance: none;"));
    client->println(F("width: calc(100% - 15px);"));
    client->println(F("height: 15px;"));
    client->println(F("border: 1px solid var(--headerBackgroundColor);"));
    client->println(F("border-radius: 5px;"));
    client->println(F("background: var(--BackgroundColorActive);"));
    client->println(F("outline: none;"));
    client->println(F("opacity: 1;"));
    client->println(F("-webkit-transition: .2s;"));
    client->println(F("transition: opacity .2s;"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F(".slider::-webkit-slider-thumb {"));
    client->println(F("-webkit-appearance: none;"));
    client->println(F("-moz-appearance: none;"));
    client->println(F("appearance: none;"));
    client->println(F("width: 25px;"));
    client->println(F("height: 25px;"));
    client->println(F("border-radius: 50%;"));
    client->println(F("background: var(--SliderThumbColor);"));
    client->println(F("cursor: pointer;"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F(".slider::-moz-range-thumb {"));
    client->println(F("width: 25px;"));
    client->println(F("height: 25px;"));
    client->println(F("border-radius: 50%;"));
    client->println(F("background: var(--SliderThumbColor);"));
    client->println(F("cursor: pointer;"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F(""));
    client->println(F("/*---------------------------------------------------------------------*/"));
    client->println(F("/* 2 thumb slider */"));
    client->println(F("#led_slider_row {"));
    client->println(F("width: 150px;"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("#led_slider_column {"));
    client->println(F("width: calc(100% - 150px);"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F(".wrap {"));
    client->println(F("--dif: calc(var(--max) - var(--min));"));
    client->println(F("display: grid;"));
    client->println(F("grid-template: repeat(2, max-content) 2em/1fr 1fr;"));
    client->println(F("overflow: hidden;"));
    client->println(F("position: relative;"));
    client->println(F("margin: 1em auto;"));
    client->println(F("width: 100%;"));
    client->println(F("background: linear-gradient(0deg, var(--sliderBackgroundColor) 2em, transparent 0);"));
    client->println(F("font-family: ubuntu mono, consolas, monaco, monospace;"));
    client->println(F("}"));
    client->println(F(".wrap::before, .wrap::after {"));
    client->println(F("grid-column: 1/span 2;"));
    client->println(F("grid-row: 3;"));
    client->println(F("height: 100%;"));
    client->println(F("background: var(--BackgroundColorActive);"));
    client->println(F("content: \"\";"));
    client->println(F("}"));
    client->println(F(".wrap::before {"));
    client->println(F("margin-left: calc((var(--a) - var(--min))/var(--dif)*100%);"));
    client->println(F("width: calc((var(--b) - var(--a))/var(--dif)*100%);"));
    client->println(F("}"));
    client->println(F(".wrap::after {"));
    client->println(F("margin-left: calc((var(--b) - var(--min))/var(--dif)*100%);"));
    client->println(F("width: calc((var(--a) - var(--b))/var(--dif)*100%);"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("[id=multi-lbl] {"));
    client->println(F("grid-column: 1/span 2;"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F(".sr-only {"));
    client->println(F("position: absolute;"));
    client->println(F("clip-path: inset(50%);"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("input.twoThumbSlider[type=range] {"));
    client->println(F("grid-column: 1/span 2;"));
    client->println(F("grid-row: 3;"));
    client->println(F("z-index: 1;"));
    client->println(F("top: 0;"));
    client->println(F("left: 0;"));
    client->println(F("margin: 0;"));
    client->println(F("background: none;"));
    client->println(F("/* get rid of white Chrome background */"));
    client->println(F("color: #000000;"));
    client->println(F("pointer-events: none;"));
    client->println(F("}"));
    client->println(F("input.twoThumbSlider[type=range]::-webkit-slider-runnable-track, input[type=range]::-webkit-slider-thumb, input[type=range] {"));
    client->println(F("-webkit-appearance: none;"));
    client->println(F("}"));
    client->println(F("input.twoThumbSlider[type=range]::-webkit-slider-runnable-track {"));
    client->println(F("width: 100%;"));
    client->println(F("height: 100%;"));
    client->println(F("background: none;"));
    client->println(F("}"));
    client->println(F("input.twoThumbSlider[type=range]::-moz-range-track {"));
    client->println(F("width: 100%;"));
    client->println(F("height: 100%;"));
    client->println(F("background: none;"));
    client->println(F("}"));
    client->println(F("input.twoThumbSlider[type=range]::-webkit-slider-thumb {"));
    client->println(F("border: none;"));
    client->println(F("/* get rid of Firefox thumb border */"));
    client->println(F("width: 2em;"));
    client->println(F("height: 100%;"));
    client->println(F("border-radius: 0;"));
    client->println(F("/* get rid of Firefox corner rounding */"));
    client->println(F("background: currentcolor;"));
    client->println(F("pointer-events: auto;"));
    client->println(F("}"));
    client->println(F("input.twoThumbSlider[type=range]::-moz-range-thumb {"));
    client->println(F("border: none;"));
    client->println(F("/* get rid of Firefox thumb border */"));
    client->println(F("width: 2em;"));
    client->println(F("height: 2em;"));
    client->println(F("border-radius: 0;"));
    client->println(F("/* get rid of Firefox corner rounding */"));
    client->println(F("background: currentcolor;"));
    client->println(F("pointer-events: auto;"));
    client->println(F("}"));
    client->println(F("input.twoThumbSlider[type=range]:focus {"));
    client->println(F("z-index: 2;"));
    client->println(F("outline: dotted 1px currentcolor;"));
    client->println(F("}"));
    client->println(F("input.twoThumbSlider[type=range]:focus, input[type=range]:focus + output {"));
    client->println(F("color: darkorange;"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("output.twoThumbSlider {"));
    client->println(F("grid-row: 2;"));
    client->println(F("}"));
    client->println(F("output.twoThumbSlider:last-child {"));
    client->println(F("text-align: right;"));
    client->println(F("}"));
    client->println(F("output.twoThumbSlider::after {"));
    client->println(F("counter-reset: c var(--c);"));
    client->println(F("content: \"--\" attr(for) \": \" counter(c) \";\";"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("</style>"));
    client->println(F(""));
    client->println(F(""));
    client->println(F("<script type=\"text/javascript\" charset=\"utf-8\">"));
    client->println(F("//--- const ------------------------------------------------------"));
    client->println(F("const LIGHT_SCENE ="));
    client->println(F("{"));
    client->println(F("OfficeTable: 0,"));
    client->println(F("LightOn: 1,"));
    client->println(F("Rainbow: 2,"));
    client->println(F("Sunset: 3,"));
    client->println(F("Sunrise: 4,"));
    client->println(F("PowerOff: 5,"));
    client->println(F("Disco: 6,"));
    client->println(F("Sbh: 7,"));
    client->println(F("UserSetting: 8,"));
    client->println(F("IDLE: 9,"));
    client->println(F("Lightning: 10,"));
    client->println(F("Moba: 11,"));
    client->println(F("Day: 12,"));
    client->println(F("Night: 13,"));
    client->println(F("Cloud: 14,"));
    client->println(F("NOF: 15"));
    client->println(F("};"));
    client->println(F(""));
    client->println(F("const XML_RREQUEST ="));
    client->println(F("{"));
    client->println(F("GetCurrentData: \"GetCurrentData\","));
    client->println(F("GetInfo: \"GetInfo\","));
    client->println(F("SetArea: \"SetArea\","));
    client->println(F("SetBrightness: \"SetBrightness\","));
    client->println(F("SetColor: \"SetColor\","));
    client->println(F("SetLightScene: \"LightScene\","));
    client->println(F("};"));
    client->println(F(""));
    client->println(F("const FIND_SERVER_TIMEOUT_MS = 2000;"));
    client->println(F("const REQUEST_CURRENT_DATA_FROM_SERVER_TIMEOUT_MS = 3000;"));
    client->println(F("const SERVER_RESPONSE_TIMEOUT_MS = 2500;  // must be shorter than REQUEST_CURRENT_DATA_FROM_ARDUINO_TIMEOUT_MS"));
    client->println(F("const USER_SETTING_OFFSET = 1;"));
    client->println(F(""));
    client->println(F(""));
    client->println(F("//--- static variables --------------------------------------------"));
    client->println(F("var s_lock_send_data = false;"));
    client->println(F("var s_is_send_data_pending = false;"));
    client->println(F("var s_pending_xml_request = \"\";"));
    client->println(F("var s_sendToServer_timeoutTimer = null;"));
    client->println(F("var s_requestDataFromServer_intervalTimer = null;"));
    client->println(F("var s_findServer_intervalTimer = null;"));
    client->println(F("var s_is_server_connected = true;"));
    client->println(F("var s_xhttp = null;"));
    client->println(F(""));
    client->println(F(""));
    client->println(F("//--- function prototypes -----------------------------------------"));
    client->println(F(""));
    client->println(F(""));
    client->println(F("//--- function ----------------------------------------------------"));
    client->println(F("function RequestCurrentDataFromServer()"));
    client->println(F("{"));
    client->println(F("SendDataToServer(\"&\" + XML_RREQUEST.GetCurrentData);"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("function FindServer()"));
    client->println(F("{"));
    client->println(F("s_is_server_connected = false;"));
    client->println(F("clearInterval(s_findServer_intervalTimer);"));
    client->println(F("s_findServer_intervalTimer = setInterval(RequestInfoFromServer, FIND_SERVER_TIMEOUT_MS)"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("function RequestInfoFromServer()"));
    client->println(F("{"));
    client->println(F("SendDataToServer(\"&\" + XML_RREQUEST.GetInfo);"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("function Reset_RequestCurrentDataFromServer_IntervallTimer()"));
    client->println(F("{"));
    client->println(F("clearInterval(s_requestDataFromServer_intervalTimer);"));
    client->println(F("s_requestDataFromServer_intervalTimer = setInterval(RequestCurrentDataFromServer, REQUEST_CURRENT_DATA_FROM_SERVER_TIMEOUT_MS);"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("function ReleaseLock()"));
    client->println(F("{"));
    client->println(F("s_lock_send_data = false;"));
    client->println(F("s_sendToServer_timeoutTimer = null;"));
    client->println(F(""));
    client->println(F("if (s_is_send_data_pending == true)"));
    client->println(F("{"));
    client->println(F("SendDataToServer(s_pending_xml_request);"));
    client->println(F("s_is_send_data_pending = false;"));
    client->println(F("s_pending_xml_request = \"\";"));
    client->println(F("}"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("function SendDataToServer(xml_request)"));
    client->println(F("{"));
    client->println(F("if (s_lock_send_data == false)"));
    client->println(F("{"));
    client->println(F("s_lock_send_data = true;"));
    client->println(F("Reset_RequestCurrentDataFromServer_IntervallTimer();"));
    client->println(F("nocache = \"&nocache=\" + Math.random() * 1000000;"));
    client->println(F(""));
    client->println(F("if (s_xhttp != null)"));
    client->println(F("{"));
    client->println(F("s_xhttp.abort();"));
    client->println(F("s_xhttp = null;"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("s_xhttp = new XMLHttpRequest();"));
    client->println(F("s_xhttp.timeout = SERVER_RESPONSE_TIMEOUT_MS;"));
    client->println(F("s_xhttp.ontimeout = function()"));
    client->println(F("{"));
    client->println(F("s_is_server_connected = false;"));
    client->println(F("clearInterval(s_requestDataFromServer_intervalTimer);"));
    client->println(F(""));
    client->println(F("document.body.style.cursor = \"progress\";"));
    client->println(F(""));
    client->println(F("LightScene_SetAllAsInactive();"));
    client->println(F(""));
    client->println(F("document.getElementById(\"brightness_value\").innerHTML = (\"loading...\");"));
    client->println(F("document.getElementById(\"color_rgb_value\").innerHTML = (\"loading...\");"));
    client->println(F("document.getElementById(\"color_red_value\").innerHTML = (\"loading...\");"));
    client->println(F("document.getElementById(\"color_green_value\").innerHTML = (\"loading...\");"));
    client->println(F("document.getElementById(\"color_blue_value\").innerHTML = (\"loading...\");"));
    client->println(F("document.getElementById(\"color_white_value\").innerHTML = (\"loading...\");"));
    client->println(F("document.getElementById(\"led_column\").innerHTML = (\"loading...\");"));
    client->println(F("document.getElementById(\"led_row\").innerHTML = (\"loading...\");"));
    client->println(F("document.querySelector(':root').style.setProperty('--SliderThumbColor', '#3F3F3F');"));
    client->println(F(""));
    client->println(F("document.getElementById(\"footer_version\").innerHTML = (\"vX.Y\");"));
    client->println(F(""));
    client->println(F("FindServer();"));
    client->println(F("}"));
    client->println(F("s_xhttp.onreadystatechange = function()"));
    client->println(F("{"));
    client->println(F("if (this.readyState == XMLHttpRequest.DONE)"));
    client->println(F("{"));
    client->println(F("if (this.status == 200)"));
    client->println(F("{"));
    client->println(F("if (this.responseXML != null)"));
    client->println(F("{"));
    client->println(F("// XML file received from Server"));
    client->println(F("if (s_is_server_connected == false)"));
    client->println(F("{"));
    client->println(F("s_is_server_connected = true;"));
    client->println(F("document.body.style.cursor = \"default\";"));
    client->println(F("clearInterval(s_findServer_intervalTimer);"));
    client->println(F("RequestCurrentDataFromServer();"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("var re = this.responseXML.getElementsByTagName('info');"));
    client->println(F("if ((re != undefined) && (re != null) && (re.length > 0))"));
    client->println(F("{"));
    client->println(F("var version_major = this.responseXML.getElementsByTagName('major')[0].childNodes[0].nodeValue;"));
    client->println(F("var version_minor = this.responseXML.getElementsByTagName('minor')[0].childNodes[0].nodeValue;"));
    client->println(F("var led_nof_row = parseInt(this.responseXML.getElementsByTagName('nof_row')[0].childNodes[0].nodeValue) - USER_SETTING_OFFSET;"));
    client->println(F("var led_nof_px = parseInt(this.responseXML.getElementsByTagName('nof_leds')[0].childNodes[0].nodeValue) - USER_SETTING_OFFSET;"));
    client->println(F("var xs = parseInt(this.responseXML.getElementsByTagName('xs')[0].childNodes[0].nodeValue);"));
    client->println(F("var xe = parseInt(this.responseXML.getElementsByTagName('xe')[0].childNodes[0].nodeValue);"));
    client->println(F("var ys = parseInt(this.responseXML.getElementsByTagName('ys')[0].childNodes[0].nodeValue);"));
    client->println(F("var ye = parseInt(this.responseXML.getElementsByTagName('ye')[0].childNodes[0].nodeValue);"));
    client->println(F(""));
    client->println(F(""));
    client->println(F("//--- update user setting columen and row slider --------------------------------"));
    client->println(F("//<!--<div style=\"transform: rotate(270deg);\">-->"));
    client->println(F("//<div id=\"slider_row\" class=\"wrap\" role=\"group\" aria-labelledby=\"multi-lbl\" style=\"--a: 0; --b: 5; --min: 0; --max: 5;\">"));
    client->println(F("//    <!--<div id=\"multi-lbl\">Multi thumb slider: 0 - 15</div>-->"));
    client->println(F("//    <input id=\"a\" class=\"twoThumbSlider\" type=\"range\" min=\"0\" value=\"0\" max=\"5\" />"));
    client->println(F("//    <!--<output for=\"a\" style=\"--c: var(--a)\"></output>-->"));
    client->println(F("//    <input id=\"b\" class=\"twoThumbSlider\" type=\"range\" min=\"0\" value=\"5\" max=\"5\" />"));
    client->println(F("//    <!--<output for=\"b\" style=\"--c: var(--b)\"></output>-->"));
    client->println(F("//</div>"));
    client->println(F("document.getElementById(\"led_row\").innerHTML = (ys + \" - \" + ye);"));
    client->println(F("document.getElementById(\"led_slider_row\").innerHTML = ("));
    client->println(F("'<div id=\"slider_row\" class=\"wrap\" role=\"group\" aria-labelledby=\"multi-lbl\" style=\"--a: ' + ys + '; --b: ' + ye + '; --min: 0; --max: ' + led_nof_row + ';\">'"));
    client->println(F("+   '<input id=\"a\" class=\"twoThumbSlider\" type=\"range\" min=\"0\" value=\"' + ys + '\" max=\"' + led_nof_row + '\" />'"));
    client->println(F("+   '<input id=\"b\" class=\"twoThumbSlider\" type=\"range\" min=\"0\" value=\"' + ye + '\" max=\"' + led_nof_row + '\" />'"));
    client->println(F("+ '</div>'"));
    client->println(F(");"));
    client->println(F("if (led_nof_row > 1)"));
    client->println(F("{"));
    client->println(F("document.getElementById(\"led_slider_row\").style.visibility = 'visible';"));
    client->println(F("}"));
    client->println(F("else"));
    client->println(F("{"));
    client->println(F("document.getElementById(\"led_slider_row\").style.visibility = 'hidden';"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("//<div id=\"slider_columen\" class=\"wrap\" role=\"group\" aria-labelledby=\"multi-lbl\" style=\"--a: 20; --b: 120; --min: 0; --max: 239\">"));
    client->println(F("//    <!--<div id=\"multi-lbl\">Multi thumb slider: 0 - 15</div>-->"));
    client->println(F("//    <input id=\"a\" class=\"twoThumbSlider\" type=\"range\" min=\"0\" value=\"20\" max=\"239\" />"));
    client->println(F("//    <!--<output for=\"a\" style=\"--c: var(--a)\"></output>-->"));
    client->println(F("//    <input id=\"b\" class=\"twoThumbSlider\" type=\"range\" min=\"0\" value=\"120\" max=\"239\" />"));
    client->println(F("//    <!--<output for=\"b\" style=\"--c: var(--b)\"></output>-->"));
    client->println(F("//</div>"));
    client->println(F("document.getElementById(\"led_column\").innerHTML = (xs + \" - \" + xe);"));
    client->println(F("document.getElementById(\"led_slider_column\").innerHTML = ("));
    client->println(F("'<div id=\"slider_columen\" class=\"wrap\" role=\"group\" aria-labelledby=\"multi-lbl\" style=\"--a: ' + xs + '; --b: ' + xe + '; --min: 0; --max: ' + led_nof_px + '\">'"));
    client->println(F("+   '<input id=\"a\" class=\"twoThumbSlider\" type=\"range\" min=\"0\" value=\"' + xs + '\" max=\"' + led_nof_px + '\" />'"));
    client->println(F("+   '<input id=\"b\" class=\"twoThumbSlider\" type=\"range\" min=\"0\" value=\"' + xe + '\" max=\"' + led_nof_px + '\" />'"));
    client->println(F("+ '</div>'"));
    client->println(F(");"));
    client->println(F(""));
    client->println(F("//--- display Arduino room light firmware version in footer ---------------------"));
    client->println(F("document.getElementById(\"footer_version\").innerHTML = (\"v\" + version_major + \".\" + version_minor);"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("re = this.responseXML.getElementsByTagName('scene');"));
    client->println(F("if ((re != undefined) && (re != null) && (re.length > 0))"));
    client->println(F("{"));
    client->println(F("LightScene_ShowAsActive(re[0].childNodes[0].nodeValue);"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("re = this.responseXML.getElementsByTagName('brightness');"));
    client->println(F("if ((re != undefined) && (re != null) && (re.length > 0))"));
    client->println(F("{"));
    client->println(F("document.getElementById(\"brightness_slider\").value = re[0].childNodes[0].nodeValue;"));
    client->println(F("document.getElementById(\"brightness_value\").innerHTML = re[0].childNodes[0].nodeValue;"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("re = this.responseXML.getElementsByTagName('color');"));
    client->println(F("if ((re != undefined) && (re != null) && (re.length > 0))"));
    client->println(F("{"));
    client->println(F("var color = parseInt(re[0].childNodes[0].nodeValue);"));
    client->println(F("if (color > 0xFFFFFF)"));
    client->println(F("{"));
    client->println(F("var white = (color >> 24) & 0xFF;"));
    client->println(F("document.getElementById(\"color_white_slider\").value = white;"));
    client->println(F("document.getElementById(\"color_white_value\").innerHTML = white;"));
    client->println(F("colorStr = ('000000' + ((white << 16) | (white << 8) | white).toString(16)).slice(-6);"));
    client->println(F("document.querySelector(':root').style.setProperty('--SliderThumbColor', '#' + colorStr);"));
    client->println(F("}"));
    client->println(F("else"));
    client->println(F("{"));
    client->println(F("var slider_value = 0;"));
    client->println(F("if (((color >= 0xFF0000) && (color <= 0xFFFF00)) && (((color & 0xFF0000) == 0xFF0000) && (((color & 0xFF) == 0x0))))"));
    client->println(F("{"));
    client->println(F("slider_value = ((color & 0xFF00) >> 8);"));
    client->println(F("}"));
    client->println(F("else if (((color >= 0x00FF00) && (color <= 0xFFFF00)) && (((color & 0xFF00) == 0xFF00) && (((color & 0xFF) == 0x0))))"));
    client->println(F("{"));
    client->println(F("slider_value = 511 - ((color & 0xFF0000) >> 16);"));
    client->println(F("}"));
    client->println(F("else if (((color >= 0x00FF00) && (color <= 0x00FFFF)) && (((color & 0xFF00) == 0xFF00) && (((color & 0xFF0000) == 0x0))))"));
    client->println(F("{"));
    client->println(F("slider_value = 512 + (color & 0xFF);"));
    client->println(F("}"));
    client->println(F("else if (((color >= 0x0000FF) && (color <= 0x00FFFF)) && (((color & 0xFF) == 0xFF) && (((color & 0xFF0000) == 0x0))))"));
    client->println(F("{"));
    client->println(F("slider_value = 1023 - ((color & 0x00FF00) >> 8);"));
    client->println(F("}"));
    client->println(F("else if (((color >= 0x0000FF) && (color <= 0xFF00FF)) && (((color & 0xFF) == 0xFF) && (((color & 0xFF00) == 0x0))))"));
    client->println(F("{"));
    client->println(F("slider_value = 1024 + ((color & 0xFF0000) >> 16);"));
    client->println(F("}"));
    client->println(F("else if (((color >= 0xFF0000) && (color <= 0xFF00FF)) && (((color & 0xFF0000) == 0xFF0000) && (((color & 0xFF00) == 0x0))))"));
    client->println(F("{"));
    client->println(F("slider_value = 1535 - (color & 0xFF);"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("// set rgb combined slider"));
    client->println(F("var colorStr = ('000000' + color.toString(16)).slice(-6);"));
    client->println(F("document.getElementById(\"color_rgb_slider\").value = slider_value;"));
    client->println(F("document.getElementById(\"color_rgb_value\").innerHTML = '0x' + colorStr;"));
    client->println(F("document.querySelector(':root').style.setProperty('--SliderThumbColor', '#' + colorStr);"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("// set rgb single slider"));
    client->println(F("var red = (color >> 16) & 0xFF;"));
    client->println(F("var green = (color >> 8) & 0xFF;"));
    client->println(F("var blue = color & 0xFF;"));
    client->println(F("document.getElementById(\"color_red_value\").innerHTML = red;"));
    client->println(F("document.getElementById(\"color_green_value\").innerHTML = green;"));
    client->println(F("document.getElementById(\"color_blue_value\").innerHTML = blue;"));
    client->println(F("document.getElementById(\"color_red_slider\").value = red;"));
    client->println(F("document.getElementById(\"color_green_slider\").value = green;"));
    client->println(F("document.getElementById(\"color_blue_slider\").value = blue;"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("re = this.responseXML.getElementsByTagName('led_area');"));
    client->println(F("if ((re != undefined) && (re != null) && (re.length > 0))"));
    client->println(F("{"));
    client->println(F("var xs = parseInt(this.responseXML.getElementsByTagName('xs')[0].childNodes[0].nodeValue) + USER_SETTING_OFFSET;"));
    client->println(F("var xe = parseInt(this.responseXML.getElementsByTagName('xe')[0].childNodes[0].nodeValue) + USER_SETTING_OFFSET;"));
    client->println(F("var ys = parseInt(this.responseXML.getElementsByTagName('ys')[0].childNodes[0].nodeValue) + USER_SETTING_OFFSET;"));
    client->println(F("var ye = parseInt(this.responseXML.getElementsByTagName('ye')[0].childNodes[0].nodeValue) + USER_SETTING_OFFSET;"));
    client->println(F(""));
    client->println(F("document.getElementById(\"led_column\").innerHTML = (xs + \" - \" + xe);"));
    client->println(F("document.getElementById(\"led_row\").innerHTML = (ys + \" - \" + ye);"));
    client->println(F(""));
    client->println(F("//document.getElementById(\"slider_columen\").style.setProperty(\"--a\", xs);"));
    client->println(F("//document.getElementById(\"slider_columen\").style.setProperty(\"--b\", xe);"));
    client->println(F("//document.getElementById(\"slider_row\").style.setProperty(\"--a\", ys);"));
    client->println(F("//document.getElementById(\"slider_row\").style.setProperty(\"--b\", ye);"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F(""));
    client->println(F("if (s_sendToServer_timeoutTimer != null)"));
    client->println(F("{"));
    client->println(F("clearTimeout(s_sendToServer_timeoutTimer);"));
    client->println(F("ReleaseLock();"));
    client->println(F("}"));
    client->println(F("}"));
    client->println(F("else"));
    client->println(F("{"));
    client->println(F("alert(\"XML = NULL\");"));
    client->println(F("}"));
    client->println(F("}"));
    client->println(F("else"));
    client->println(F("{"));
    client->println(F("//alert(\"Keine Verbindung zum Webserver\\nStatus: \" + this.status);"));
    client->println(F("}"));
    client->println(F("}"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("// send HTTP GET request with data"));
    client->println(F("s_xhttp.open(\"GET\", \"ajax_inputs\" + xml_request + nocache, true);"));
    client->println(F("s_xhttp.send();"));
    client->println(F(""));
    client->println(F("// lock Send to Arduino"));
    client->println(F("s_sendToServer_timeoutTimer = setTimeout('ReleaseLock()', REQUEST_CURRENT_DATA_FROM_SERVER_TIMEOUT_MS);"));
    client->println(F("}"));
    client->println(F("else"));
    client->println(F("{"));
    client->println(F("s_is_send_data_pending = true;"));
    client->println(F("s_pending_xml_request = xml_request;"));
    client->println(F("}"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("function LightSceneButtonPushed(scene, bt)"));
    client->println(F("{"));
    client->println(F("LightScene_ShowAsActive(scene)"));
    client->println(F("var brightness = document.getElementById(\"brightness_slider\").value;"));
    client->println(F("if (brightness == 0)"));
    client->println(F("{"));
    client->println(F("brightness = 100;"));
    client->println(F("}"));
    client->println(F("SendDataToServer(\"&\" + XML_RREQUEST.SetLightScene + \"=\" + scene + \"&\" + XML_RREQUEST.SetBrightness + \"=\" + brightness);"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("function LightScene_SetAllAsInactive()"));
    client->println(F("{"));
    client->println(F("var matches = document.getElementsByClassName('active-class');"));
    client->println(F("for (var cnt = 0; cnt < matches.length; cnt++)"));
    client->println(F("{"));
    client->println(F("matches[cnt].classList.remove('active-class');"));
    client->println(F("}"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("function LightScene_ShowAsActive(scene)"));
    client->println(F("{"));
    client->println(F("LightScene_SetAllAsInactive();"));
    client->println(F(""));
    client->println(F("if (scene < LIGHT_SCENE.NOF)"));
    client->println(F("{"));
    client->println(F("document.getElementById(\"LightScene\" + scene).classList.add(\"active-class\");"));
    client->println(F("}"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("function BrighntessSliderChanged()"));
    client->println(F("{"));
    client->println(F("var slider = document.getElementById(\"brightness_slider\");"));
    client->println(F("var output = document.getElementById(\"brightness_value\");"));
    client->println(F("output.innerHTML = slider.value;"));
    client->println(F(""));
    client->println(F("SendDataToServer(\"&\" + XML_RREQUEST.SetBrightness + \"=\" + slider.value);"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("function ColorRGBSliderChanged()"));
    client->println(F("{"));
    client->println(F("var slider = document.getElementById(\"color_rgb_slider\");"));
    client->println(F("var output = document.getElementById(\"color_rgb_value\");"));
    client->println(F(""));
    client->println(F("var color = 0;"));
    client->println(F("if (slider.value > 1279)"));
    client->println(F("{"));
    client->println(F("color = 0xFF00FF - (slider.value - 1280);"));
    client->println(F("}"));
    client->println(F("else if (slider.value > 1023)"));
    client->println(F("{"));
    client->println(F("color = 0x0000FF + ((slider.value - 1024) << 16);"));
    client->println(F("}"));
    client->println(F("else if (slider.value > 767)"));
    client->println(F("{"));
    client->println(F("color = 0x00FFFF - ((slider.value - 768) << 8);"));
    client->println(F("}"));
    client->println(F("else if (slider.value > 511)"));
    client->println(F("{"));
    client->println(F("color = 0x00FF00 + (slider.value - 512);"));
    client->println(F("}"));
    client->println(F("else if (slider.value > 255)"));
    client->println(F("{"));
    client->println(F("color = 0xFFFF00 - ((slider.value - 256) << 16);"));
    client->println(F("}"));
    client->println(F("else"));
    client->println(F("{"));
    client->println(F("color = 0xFF0000 + (slider.value << 8);"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("var colorStr = ('000000' + color.toString(16)).slice(-6);"));
    client->println(F("output.innerHTML = '0x' + colorStr;"));
    client->println(F("document.querySelector(':root').style.setProperty('--SliderThumbColor', '#' + colorStr);"));
    client->println(F("SendDataToServer(\"&\" + XML_RREQUEST.SetColor + \"=\" + color);"));
    client->println(F(""));
    client->println(F(""));
    client->println(F("var red = (color >> 16) & 0xFF;"));
    client->println(F("var green = (color >> 8) & 0xFF;"));
    client->println(F("var blue = color & 0xFF;"));
    client->println(F("document.getElementById(\"color_red_value\").innerHTML = red;"));
    client->println(F("document.getElementById(\"color_green_value\").innerHTML = green;"));
    client->println(F("document.getElementById(\"color_blue_value\").innerHTML = blue;"));
    client->println(F("document.getElementById(\"color_red_slider\").value = red;"));
    client->println(F("document.getElementById(\"color_green_slider\").value = green;"));
    client->println(F("document.getElementById(\"color_blue_slider\").value = blue;"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("function ColorRGBSingleSliderChanged()"));
    client->println(F("{"));
    client->println(F("var red_slider = document.getElementById(\"color_red_slider\");"));
    client->println(F("var green_slider = document.getElementById(\"color_green_slider\");"));
    client->println(F("var blue_slider = document.getElementById(\"color_blue_slider\");"));
    client->println(F(""));
    client->println(F("document.getElementById(\"color_red_value\").innerHTML = red_slider.value;"));
    client->println(F("document.getElementById(\"color_green_value\").innerHTML = green_slider.value;"));
    client->println(F("document.getElementById(\"color_blue_value\").innerHTML = blue_slider.value;"));
    client->println(F(""));
    client->println(F("var color = 0;"));
    client->println(F("color = (red_slider.value << 16);"));
    client->println(F("color |= (green_slider.value << 8);"));
    client->println(F("color |= blue_slider.value"));
    client->println(F(""));
    client->println(F("var colorStr = ('000000' + color.toString(16)).slice(-6);"));
    client->println(F("document.querySelector(':root').style.setProperty('--SliderThumbColor', '#' + colorStr);"));
    client->println(F("document.getElementById(\"color_rgb_value\").innerHTML = colorStr;"));
    client->println(F("SendDataToServer(\"&\" + XML_RREQUEST.SetColor + \"=\" + color);"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("function ColorWhiteSliderChanged()"));
    client->println(F("{"));
    client->println(F("var slider = document.getElementById(\"color_white_slider\");"));
    client->println(F("var output = document.getElementById(\"color_white_value\");"));
    client->println(F(""));
    client->println(F("var color = slider.value;"));
    client->println(F("output.innerHTML = color;"));
    client->println(F("colorStr = ('000000' + ((color << 16) | (color << 8) | color).toString(16)).slice(-6);"));
    client->println(F("document.querySelector(':root').style.setProperty('--SliderThumbColor', '#' + colorStr);"));
    client->println(F("SendDataToServer(\"&\" + XML_RREQUEST.SetColor + \"=\" + (slider.value << 24));"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("// 2 thumb slider"));
    client->println(F("\"use strict\";"));
    client->println(F("addEventListener('input', e => {"));
    client->println(F("if (e.target.classList.contains(\"twoThumbSlider\"))"));
    client->println(F("{"));
    client->println(F("let _t = e.target;"));
    client->println(F(""));
    client->println(F("_t.parentNode.style.setProperty(`--${_t.id}`, +_t.value);"));
    client->println(F(""));
    client->println(F("SliderTwoThumb_Update();"));
    client->println(F("}"));
    client->println(F("}, false);"));
    client->println(F(""));
    client->println(F("function SliderTwoThumb_Update()"));
    client->println(F("{"));
    client->println(F("var xs = parseInt(getComputedStyle(document.getElementById(\"slider_columen\")).getPropertyValue('--a'), 10);"));
    client->println(F("var xe = parseInt(getComputedStyle(document.getElementById(\"slider_columen\")).getPropertyValue('--b'), 10);"));
    client->println(F("var ys = parseInt(getComputedStyle(document.getElementById(\"slider_row\")).getPropertyValue('--a'), 10);"));
    client->println(F("var ye = parseInt(getComputedStyle(document.getElementById(\"slider_row\")).getPropertyValue('--b'), 10);"));
    client->println(F(""));
    client->println(F("if (xs > xe)"));
    client->println(F("{"));
    client->println(F("var tmp = xs;"));
    client->println(F("xs = xe;"));
    client->println(F("xe = tmp;"));
    client->println(F("}"));
    client->println(F("if (ys > ye)"));
    client->println(F("{"));
    client->println(F("var tmp = ys;"));
    client->println(F("ys = ye;"));
    client->println(F("ye = tmp;"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F("SendDataToServer(\"&\" + XML_RREQUEST.SetArea + \"=X\" + xs + \"-\" + xe + \"Y\" + ys + \"-\" + ye);"));
    client->println(F("xs += USER_SETTING_OFFSET;"));
    client->println(F("xe += USER_SETTING_OFFSET;"));
    client->println(F("ys += USER_SETTING_OFFSET;"));
    client->println(F("ye += USER_SETTING_OFFSET;"));
    client->println(F("document.getElementById(\"led_column\").innerHTML = (xs + \" - \" + xe);"));
    client->println(F("document.getElementById(\"led_row\").innerHTML = (ys + \" - \" + ye);"));
    client->println(F("}"));
    client->println(F(""));
    client->println(F(""));
    client->println(F("//--- onload event handler ----------------------------------------"));
    client->println(F("window.addEventListener('load', (event) =>"));
    client->println(F("{"));
    client->println(F("var button = '<button class=\"button\" id=\"LightScene' + LIGHT_SCENE.PowerOff + '\" onclick=\"LightSceneButtonPushed(LIGHT_SCENE.PowerOff, this)\">Off</button>'"));
    client->println(F("+ '<button class=\"button\" id=\"LightScene' + LIGHT_SCENE.OfficeTable + '\" onclick=\"LightSceneButtonPushed(LIGHT_SCENE.OfficeTable, this)\">B&uuml;rotisch</button>'"));
    client->println(F("+ '<button class=\"button\" id=\"LightScene' + LIGHT_SCENE.Moba + '\" onclick=\"LightSceneButtonPushed(LIGHT_SCENE.Moba, this)\">MoBa</button>'"));
    client->println(F("+ '<button class=\"button\" id=\"LightScene' + LIGHT_SCENE.LightOn + '\" onclick=\"LightSceneButtonPushed(LIGHT_SCENE.LightOn, this)\">All On</button>'"));
    client->println(F("+ '<button class=\"button\" id=\"LightScene' + LIGHT_SCENE.Rainbow + '\" onclick=\"LightSceneButtonPushed(LIGHT_SCENE.Rainbow, this)\">Rainbow</button>'"));
    client->println(F("+ '<button class=\"button\" id=\"LightScene' + LIGHT_SCENE.Disco + '\" onclick=\"LightSceneButtonPushed(LIGHT_SCENE.Disco, this)\">Disco</button>'"));
    client->println(F("+ '<button class=\"button\" id=\"LightScene' + LIGHT_SCENE.UserSetting + '\" onclick=\"LightSceneButtonPushed(LIGHT_SCENE.UserSetting, this)\">User Set</button>'"));
    client->println(F("+ '<br>'"));
    client->println(F("+ '<button class=\"button\" id=\"LightScene' + LIGHT_SCENE.Sunrise + '\" onclick=\"LightSceneButtonPushed(LIGHT_SCENE.Sunrise, this)\">Sunrise</button>'"));
    client->println(F("+ '<button class=\"button\" id=\"LightScene' + LIGHT_SCENE.Day + '\" onclick=\"LightSceneButtonPushed(LIGHT_SCENE.Day, this)\">Day</button>'"));
    client->println(F("+ '<button class=\"button\" id=\"LightScene' + LIGHT_SCENE.Sunset + '\" onclick=\"LightSceneButtonPushed(LIGHT_SCENE.Sunset, this)\">Sunset</button>'"));
    client->println(F("+ '<button class=\"button\" id=\"LightScene' + LIGHT_SCENE.Night + '\" onclick=\"LightSceneButtonPushed(LIGHT_SCENE.Night, this)\">Night</button>'"));
    client->println(F("+ '<button class=\"button\" id=\"LightScene' + LIGHT_SCENE.Cloud + '\" onclick=\"LightSceneButtonPushed(LIGHT_SCENE.Cloud, this)\">Clouds</button>'"));
    client->println(F("+ '<button class=\"button\" id=\"LightScene' + LIGHT_SCENE.Lightning + '\" onclick=\"LightSceneButtonPushed(LIGHT_SCENE.Lightning, this)\">Lightning</button>';"));
    client->println(F(""));
    client->println(F("document.getElementById(\"LightScene\").innerHTML = button;"));
    client->println(F(""));
    client->println(F("FindServer();"));
    client->println(F("});"));
    client->println(F(""));
    client->println(F("</script>"));
    client->println(F("</head>"));
    client->println(F(""));
    client->println(F("<body>"));
    client->println(F("<h1>MoBa Licht Steuerung</h1>"));
    client->println(F("<br>"));
    client->println(F("<div id=\"LightScene\"></div>"));
    client->println(F("<br>"));
    client->println(F("<br>"));
    client->println(F("<br>"));
    client->println(F(""));
    client->println(F("<h2>Helligkeit</h2>"));
    client->println(F("<br>"));
    client->println(F("<div class=\"slidecontainer\">"));
    client->println(F("<label for=\"brightness_value\">Helligkeit</label>"));
    client->println(F("<label id=\"brightness_value\" class=\"user_value\"></label>"));
    client->println(F("<input type=\"range\" min=\"0\" max=\"255\" value=\"50\" class=\"slider\" id=\"brightness_slider\" oninput=\"BrighntessSliderChanged()\">"));
    client->println(F("</div>"));
    client->println(F("<br>"));
    client->println(F("<br>"));
    client->println(F(""));
    client->println(F("<h2>Farbe</h2>"));
    client->println(F("<br>"));
    client->println(F("<div class=\"slidecontainer\">"));
    client->println(F("<label for=\"color_rgb_value\">RGB</label>"));
    client->println(F("<label id=\"color_rgb_value\" class=\"user_value\"></label>"));
    client->println(F("<input type=\"range\" min=\"0\" max=\"1535\" value=\"50\" class=\"slider\" id=\"color_rgb_slider\" oninput=\"ColorRGBSliderChanged()\" style=\"background-image: linear-gradient(90deg, #ff0000, #ffff00, #00ff00, #00ffff, #0000ff, #ff00ff, #ff0000);\">"));
    client->println(F("</div>"));
    client->println(F("<br>"));
    client->println(F("<div class=\"slidecontainer\">"));
    client->println(F("<label for=\"color_red_value\">Rot</label>"));
    client->println(F("<label id=\"color_red_value\" class=\"user_value\"></label>"));
    client->println(F("<input type=\"range\" min=\"0\" max=\"255\" value=\"50\" class=\"slider\" id=\"color_red_slider\" oninput=\"ColorRGBSingleSliderChanged()\" style=\"background-image: linear-gradient(90deg, black, red)\">"));
    client->println(F(""));
    client->println(F("<label for=\"color_green_value\">Gr&uuml;n</label>"));
    client->println(F("<label id=\"color_green_value\" class=\"user_value\"></label>"));
    client->println(F("<input type=\"range\" min=\"0\" max=\"255\" value=\"50\" class=\"slider\" id=\"color_green_slider\" oninput=\"ColorRGBSingleSliderChanged()\" style=\"background-image: linear-gradient(90deg, black, rgb(0, 255, 0))\">"));
    client->println(F(""));
    client->println(F("<label for=\"color_blue_value\">Blau</label>"));
    client->println(F("<label id=\"color_blue_value\" class=\"user_value\"></label>"));
    client->println(F("<input type=\"range\" min=\"0\" max=\"255\" value=\"50\" class=\"slider\" id=\"color_blue_slider\" oninput=\"ColorRGBSingleSliderChanged()\" style=\"background-image: linear-gradient(90deg, black, blue)\">"));
    client->println(F(""));
    client->println(F("<label for=\"color_white_value\">Weiss</label>"));
    client->println(F("<label id=\"color_white_value\" class=\"user_value\"></label>"));
    client->println(F("<input type=\"range\" min=\"0\" max=\"255\" value=\"50\" class=\"slider\" id=\"color_white_slider\" oninput=\"ColorWhiteSliderChanged()\" style=\"background-image: linear-gradient(90deg, black, white)\">"));
    client->println(F("</div>"));
    client->println(F("<br>"));
    client->println(F("<br>"));
    client->println(F(""));
    client->println(F("<h2>Leuchtposition</h2>"));
    client->println(F("<table style=\"width: 100%\">"));
    client->println(F("<tr>"));
    client->println(F("<td>"));
    client->println(F("<label for=\"led_row\">Reihen</label>"));
    client->println(F("<label type=\"text\" id=\"led_row\" class=\"user_value\"> loading...</label>"));
    client->println(F("</td>"));
    client->println(F("<td>"));
    client->println(F("<label for=\"led_column\">L&auml;nge</label>"));
    client->println(F("<label type=\"text\" id=\"led_column\" class=\"user_value\"> loading...</label>"));
    client->println(F("</td>"));
    client->println(F("</tr>"));
    client->println(F("<tr>"));
    client->println(F("<td id=\"led_slider_row\">"));
    client->println(F("</td>"));
    client->println(F("<td id=led_slider_column>"));
    client->println(F("</td>"));
    client->println(F("</tr>"));
    client->println(F("</table>"));
    client->println(F("</body>"));
    client->println(F("</html>"));
    client->println(F("<html>"));
    client->println(F("<footer>"));
    client->println(F("<div>"));
    client->println(F("<br>"));
    client->println(F("<br>"));
    client->println(F("<hr>"));
    client->println(F("<div id=\"footer_version\" style=\"float:left\"></div>"));
    client->println(F("&nbsp;&nbsp;|&nbsp;&nbsp;27. April 2023 &nbsp; &copy; MarkusNTrains"));
    client->println(F("<a href='mailto:markusntrains@gmx.ch'>E-Mail</a>"));
    client->println(F("</div>"));
    client->println(F("</footer>"));
    client->println(F("</html>"));
}

